import React from "react";
import { renderToString } from "react-dom/server";
import { StaticRouter } from 'react-router-dom';
import configureStore from "./store/store";
import App from "./App";
import { ApiServise } from "./api";
import { ChunkExtractor } from '@loadable/server';
const path = require('path');

function renderHTML(html, preloadedState, extractor) {
    return `
        <!doctype html>
        <html>
          <head>
            <meta charset=utf-8>
            <title>React Server Side Rendering</title>
            ${process.env.NODE_ENV === 'development' ? '' : extractor.getStyleTags()}
          </head>
          <body>
            <div id="root">${html}</div>
            <script>
              // WARNING: See the following for security issues around embedding JSON in HTML:
              // http://redux.js.org/docs/recipes/ServerRendering.html#security-considerations
              window.PRELOADED_STATE = ${JSON.stringify(preloadedState).replace(/</g, '\\u003c')}
            </script>
            ${extractor.getScriptTags()}
          </body>
        </html>
    `;
}

export default function serverRenderer() {
    return async (req, res, next) => {
        if (req.url.indexOf('.') !== -1) {
            next();
            return;
        }

        let initialState = {};
        if (req.url.includes('/search')) {
            const searchQuery = req.url.split('/search/')[1];

            const initialData = await ApiServise.get({
                searchBy: 'title',
                search: searchQuery
            }).then((response) => { return response.data });

            initialState = { movies: {
                movies: [...initialData.data],
                totalAmount: initialData.totalAmount,
                movieDetails: null,
                endpointParams: {
                    sortBy: 'release_date',
                    sortOrder: 'desc',
                    searchBy: 'title',
                    filter: '',
                    search: searchQuery
                },
                error: null
            }};
        }

        const store = configureStore(initialState);
        // This context object contains the results of the render
        const context = {};
                
        // // This is the stats file generated by webpack loadable plugin
        const statsFile = path.resolve('./public/loadable-stats.json');

        // // We create an extractor from the statsFile
        const extractor = new ChunkExtractor({ 
            statsFile,
            publicPath: '/'
        });

        const renderRoot = () => extractor.collectChunks(
            <App
                context={context}
                location={req.url}
                Router={StaticRouter}
                store={store}
            />);
    
        renderToString(renderRoot());
    
        // context.url will contain the URL to redirect to if a <Redirect> was used
        if (context.url) {
            res.writeHead(302, {
            Location: context.url,
            });
            res.end();
            return;
        }
    
        const htmlString = renderToString(renderRoot());
        const preloadedState = store.getState();
    
        res.send(renderHTML(htmlString, preloadedState, extractor));
    };
}